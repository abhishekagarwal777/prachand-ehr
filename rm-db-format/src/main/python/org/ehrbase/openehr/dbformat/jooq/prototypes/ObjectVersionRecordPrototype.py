from uuid import UUID
from datetime import datetime
from jooq import Record2

class ObjectVersionRecordPrototype(AbstractRecordPrototype):
    """
    This class is NOT generated by jOOQ.
    Represents a record prototype for object versions, extending the base record prototype.
    """

    serial_version_uid = 1  # Equivalent to the Java serialVersionUID
    COLUMNS = determine_columns(True, True)  # Static map for column indices

    def set_vo_id(self, value: UUID) -> None:
        """Sets the VO_ID field."""
        self.set(FieldPrototype.VO_ID, value)

    def get_vo_id(self) -> UUID:
        """Gets the VO_ID field."""
        return self.get(FieldPrototype.VO_ID)

    def set_ehr_id(self, value: UUID) -> None:
        """Sets the EHR_ID field."""
        self.set(FieldPrototype.EHR_ID, value)

    def get_ehr_id(self) -> UUID:
        """Gets the EHR_ID field."""
        return self.get(FieldPrototype.EHR_ID)

    def set_contribution_id(self, value: UUID) -> None:
        """Sets the CONTRIBUTION_ID field."""
        self.set(FieldPrototype.CONTRIBUTION_ID, value)

    def get_contribution_id(self) -> UUID:
        """Gets the CONTRIBUTION_ID field."""
        return self.get(FieldPrototype.CONTRIBUTION_ID)

    def set_audit_id(self, value: UUID) -> None:
        """Sets the AUDIT_ID field."""
        self.set(FieldPrototype.AUDIT_ID, value)

    def get_audit_id(self) -> UUID:
        """Gets the AUDIT_ID field."""
        return self.get(FieldPrototype.AUDIT_ID)

    def set_sys_version(self, value: int) -> None:
        """Sets the SYS_VERSION field."""
        self.set(FieldPrototype.SYS_VERSION, value)

    def get_sys_version(self) -> int:
        """Gets the SYS_VERSION field."""
        return self.get(FieldPrototype.SYS_VERSION)

    def set_sys_period_lower(self, value: datetime) -> None:
        """Sets the SYS_PERIOD_LOWER field."""
        self.set(FieldPrototype.SYS_PERIOD_LOWER, value)

    def get_sys_period_lower(self) -> datetime:
        """Gets the SYS_PERIOD_LOWER field."""
        return self.get(FieldPrototype.SYS_PERIOD_LOWER)

    def key(self) -> Record2:
        """Primary key information."""
        return super().key()

    def __init__(self):
        """Create a detached ObjectVersionRecord."""
        super().__init__(ObjectVersionTablePrototype.INSTANCE)

    def __init__(self, 
                 vo_id: UUID, 
                 ehr_id: UUID, 
                 contribution_id: UUID, 
                 audit_id: UUID, 
                 sys_version: int, 
                 sys_period_lower: datetime):
        """Create a detached, initialized ObjectVersionRecord."""
        super().__init__(ObjectVersionTablePrototype.INSTANCE, 
                         vo_id, 
                         ehr_id, 
                         contribution_id, 
                         audit_id, 
                         sys_version, 
                         sys_period_lower)

    def column_index(self, f: 'FieldPrototype') -> int:
        """Get the index of the specified column."""
        return self.COLUMNS[f]
